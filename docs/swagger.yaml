definitions:
  models.Task:
    properties:
      created_at:
        type: string
      deleted_at:
        description: Campo de soft delete
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      status:
        $ref: '#/definitions/models.TaskStatus'
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.TaskStatus:
    enum:
    - RESOLVED
    - UNRESOLVED
    type: string
    x-enum-varnames:
    - Resolved
    - Unresolved
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      tasks:
        items:
          $ref: '#/definitions/models.Task'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: To Do List
  title: Go Todo List
  version: "1"
paths:
  /api/tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Elimina una tarea espec√≠fica del usuario autenticado dado el ID
        de la tarea.
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'message": "Task deleted successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error": "Task not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error": "Failed to delete task'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Elimina una tarea del usuario autenticado
      tags:
      - tasks
  /api/tasks/{id}/resolve:
    patch:
      consumes:
      - application/json
      description: Actualiza el estado de una tarea del usuario autenticado a "RESOLVED".
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Task marked as resolved
          schema:
            $ref: '#/definitions/models.Task'
        "404":
          description: 'error": "Task not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error": "Failed to mark task as resolved'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Marca una tarea como resuelta
      tags:
      - tasks
  /login:
    post:
      consumes:
      - application/json
      description: Login a user and return a JWT token
      parameters:
      - description: Login Input
        in: body
        name: login
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User Registration
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register
  /tasks:
    get:
      description: Get tasks for the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get Task
    post:
      consumes:
      - application/json
      description: Create a new task for the logged-in user
      parameters:
      - description: Task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Create Task
securityDefinitions:
  "":
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
